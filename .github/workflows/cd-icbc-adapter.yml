name: cd-icbc-adapter

on:
  push:
    # Publish `main` as Docker `latest` image.
    branches: [main, codecov]

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*
    paths:    
      - "icbc-adapter/src/**"
      - ".github/workflows/cd-icbc-adapter.yml"

env:
  IMAGE_NAME: icbc-adapter
  IMAGE_ID: ${{ secrets.OCP4_REGISTRY }}/${{ secrets.OCP4_NAMESPACE }}/icbc-adapter

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    env:
       working-directory: ./icbc-adapter/src
       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
       GIT_BRANCH: "${{github.ref}}"

    steps:
      - uses: actions/checkout@v2
      
      - name: Setup .NET 6
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: "6.0.x"

      - name: Install dependencies
        run: dotnet restore
        working-directory: ${{env.working-directory}}

      - name: Install coverlet for code coverage
        run: dotnet tool install -g coverlet.console --version 1.7.2
        working-directory: ${{env.working-directory}}
        
      - name: Build
        run: dotnet build --configuration Release --no-restore
        working-directory: ${{env.working-directory}}
        
      - name: Generate code coverage
        working-directory: ${{env.working-directory}}/Pssg.Unit.Tests.Interfaces.Icbc
        run: |
          mkdir -p TestResults
          rm -rf ./TestResults
          rm -rf ./TestResults
          dotnet test --collect:"XPlat Code Coverage" --settings coverlet.runsettings --no-restore
          mv TestResults/*/* ../TestResults/
          head TestResults/coverage.opencover.xml
          
      - name: Codecov
        uses: codecov/codecov-action@v2.1.0
        with:
          # User defined upload name. Visible in Codecov UI
          name: DMFT
          # Repository upload token - get it from codecov.io. Required only for private repositories
          token: ${{ secrets.CODECOV_TOKEN }}
          # Path to coverage file to upload
          file: ${{env.working-directory}}/Pssg.Unit.Tests.Interfaces.Icbc/TestResults/coverage.opencover.xml
          # Flag upload to group coverage metrics (e.g. unittests | integration | ui,chrome)
          flags: unittests
          # Environment variables to tag the upload with (e.g. PYTHON | OS,PYTHON)
          env_vars: C#
          # Specify whether or not CI build should fail if Codecov runs into an error during upload
          fail_ci_if_error: true
        

      - name: Log into registry
        run: echo "${{ secrets.OCP4_PASSWORD  }}" | docker login ${{ secrets.OCP4_REGISTRY }}/${{ secrets.OCP4_NAMESPACE }} -u ${{ secrets.OCP4_USERNAME  }} --password-stdin

      - name: Pull image
        run: docker pull $IMAGE_ID || true

      - name: Build image
        run: docker build . --file ./icbc-adapter/src/Dockerfile --tag $IMAGE_NAME --cache-from=$IMAGE_ID 

      - name: Push image
        run: |
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
