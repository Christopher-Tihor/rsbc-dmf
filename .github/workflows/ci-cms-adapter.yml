name: ci-cms-adapter

on:
  #push:
     #branches: [main, codecov]
  pull_request:
    types: [opened, reopened, edited, synchronize]
    paths:
      - "cms-adapter/src/**"
      - ".github/workflows/ci-cms-adapter.yml"

env:
  working-directory: ./
  solution-folder: /cms-adapter/src
  IMAGE_NAME: cms-adapter
  RUN_NUMBER: ${{ github.run_number }}
  BUILD_PREFIX: ${{ vars.versionprefix }}
  BUILD_ID: ${{ github.server_url }}!${{ github.repository }}!${{ github.ref_name }}!${{ github.sha }}!${{ vars.versionprefix }}!${{ github.run_number }}


jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: rlespinasse/git-commit-data-action@v1.x
      - name: Extract Branch Name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch
      - name: Setup .NET 
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: "6.0.x"
      - name: Install dependencies
        run: dotnet restore
        working-directory: ${{env.working-directory}}${{env.solution-folder}}

      - name: Install coverlet for code coverage
        run: dotnet tool install -g coverlet.console --version 1.7.2
        working-directory: ${{env.working-directory}}${{env.solution-folder}}

      - name: Build
        run: dotnet build --configuration Release --no-restore
        working-directory: ${{env.working-directory}}${{env.solution-folder}}

      - name: Test
        run: |          
          dotnet test -c Release --no-restore --verbosity normal           
        working-directory: ${{env.working-directory}}${{env.solution-folder}}
        
      #- name: Generate code coverage
        #working-directory: ${{env.working-directory}}${{env.solution-folder}}
        #run: |
          #mkdir -p CovTestResults
          #rm -rf ./TestResults
          #rm -rf ./TestResults
          #dotnet test --collect:"XPlat Code Coverage" --settings coverlet.runsettings --no-restore 
          #mv Rsbc.Dmf.CaseManagement.Tests/TestResults/*/* ./CovTestResults/
          #head CovTestResults/coverage.opencover.xml
      #- name: Codecov
        #uses: codecov/codecov-action@v2.1.0
        #with:
          # User defined upload name. Visible in Codecov UI
          #name: DMFT
          # Repository upload token - get it from codecov.io. Required only for private repositories
          #token: ${{ secrets.CODECOV_TOKEN }}
          # Path to coverage file to upload
          #file: ${{env.working-directory}}/Pssg.Unit.Tests.Interfaces.Icbc/CovTestResults/coverage.opencover.xml
          # Flag upload to group coverage metrics (e.g. unittests | integration | ui,chrome)
          #flags: unittests
          # Environment variables to tag the upload with (e.g. PYTHON | OS,PYTHON)
          #env_vars: C#
          # Specify whether or not CI build should fail if Codecov runs into an error during upload
          #fail_ci_if_error: false


      - name: Build image
        working-directory: ./cms-adapter/src
        run: docker build . --file Dockerfile --build-arg BUILD_ID --build-arg BUILD_VERSION="$BUILD_PREFIX`expr $RUN_NUMBER % 256`" --tag $IMAGE_NAME --cache-from=$IMAGE_ID
