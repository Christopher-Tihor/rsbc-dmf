name: cd-system-status-ui

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - main

    # Publish `v1.2.3` tags as releases. 
    tags:
      - v*
    paths:
      - "system-status/src/ClientApp/**"
      - ".github/workflows/cd-system-status-ui.yml"
env:
  IMAGE_NAME: system-status-ui
  IMAGE_ID: ${{ secrets.OCP4_REGISTRY }}/${{ secrets.OCP4_NAMESPACE }}/system-status-ui

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v4

      - name: Log into registry
        run: echo "${{ secrets.OCP4_PASSWORD  }}" | docker login ${{ secrets.OCP4_REGISTRY }}/${{ secrets.OCP4_NAMESPACE }} -u ${{ secrets.OCP4_USERNAME }} --password-stdin

      - name: Pull image
        run: docker pull $IMAGE_ID || true
      
      - name: Pull Caddy from OpenShift
        run: docker pull caddy:latest

      - name: Build image
        working-directory: ./system-status/src/ClientApp
        run: docker build . --file Dockerfile --tag $IMAGE_NAME 
        # --cache-from=$IMAGE_ID

      - name: Push image
        run: |
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
